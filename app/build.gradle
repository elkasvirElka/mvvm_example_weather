apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "ru.elminn.weater_mvvm"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_BASE_URL", '"https://api.openweathermap.org/"'
        buildConfigField "String", "WEATHER_API_KEY", readWeatherApiKey()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    configurations.all {
        resolutionStrategy {
            force group: 'androidx.test', name: 'monitor', version: '1.2.0'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
// Android runner and rules support
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha01'
    testImplementation 'org.robolectric:robolectric:4.3'
    debugImplementation ("androidx.fragment:fragment-testing:1.2.0-alpha01"){
        exclude group: "com.android.support.test.espresso", module: "espresso-intents"
    }
    testImplementation 'androidx.test:core:1.1.0'
    // add this for intent mocking support
    testImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'

    // add this for webview testing support
    testImplementation 'com.android.support.test.espresso:espresso-web:3.0.2'

    implementation 'android.arch.lifecycle:extensions:1.1.1'

//Rx
    implementation "io.reactivex.rxjava2:rxjava:2.2.10"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
//okhttp3
    implementation "com.squareup.okhttp3:okhttp:3.13.1"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.13.1'

    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'
//retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'


    //Dagger2
    implementation 'com.google.dagger:dagger:2.17'
    kapt 'com.google.dagger:dagger-compiler:2.17'
    compileOnly 'org.glassfish:javax.annotation:3.1.1'
    androidTestImplementation 'androidx.test:rules:1.3.0-alpha01'
}
private String readWeatherApiKey() {
    def keysPropertiesFile = rootProject.file("keys.properties")
    def keysProperties = new Properties()
    try {
        keysProperties.load(new FileInputStream(keysPropertiesFile))
        def weatherApiKey = keysProperties['weather_api_key']
        return weatherApiKey == null ? '""' : weatherApiKey
    } catch (ignored) {
        return '""'
    }
}